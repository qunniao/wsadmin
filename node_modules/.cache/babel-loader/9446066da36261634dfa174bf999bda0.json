{"remainingRequest":"E:\\HtmlProjects\\wsadmin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js!E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HtmlProjects\\wsadmin\\src\\components\\prodTwo\\sku-tag.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HtmlProjects\\wsadmin\\src\\components\\prodTwo\\sku-tag.vue","mtime":1572513609593},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      value: [],\n      isShowTagInput: false,\n      addTagInput: {\n        propName: '',\n        selectValues: []\n      },\n      tagItemInputs: [],\n      // sku的标记\n      // tags: [],\n      // 数据库中的规格\n      dbTags: [],\n      // 根据选定的规格所查询出来的规格值\n      dbTagValues: [],\n      specs: [],\n      // 使用的规格\n      initing: false\n    };\n  },\n  created: function created() {// this.$http({\n    //   url: this.$http.adornUrl(`/prod/spec/list`),\n    //   method: 'get',\n    //   params: this.$http.adornParams()\n    // }).then(({data}) => {\n    //   this.dbTags = data\n    // })\n  },\n  // props: {\n  //   tags: { // sku的标记\n  //     default: [],\n  //     type: Array\n  //   }\n  // },\n  computed: {\n    // 未使用的规格, 通过计算属性计算\n    unUseTags: function unUseTags() {\n      var _this = this;\n\n      var res = [];\n\n      var _loop = function _loop(i) {\n        var dbTag = _this.dbTags[i];\n\n        var specIndex = _this.skuTags.findIndex(function (tag) {\n          return tag.tagName === dbTag.propName;\n        });\n\n        if (specIndex === -1) {\n          res.push(dbTag);\n        }\n      };\n\n      for (var i = 0; i < this.dbTags.length; i++) {\n        _loop(i);\n      }\n\n      return res;\n    },\n    skuTags: {\n      get: function get() {\n        return this.$store.state.prod.skuTags;\n      },\n      set: function set(val) {\n        this.$store.commit('prod/updateSkuTags', val);\n      }\n    },\n    defalutSku: function defalutSku() {\n      return this.$store.state.prod.defalutSku;\n    }\n  },\n  watch: {\n    skuTags: {\n      handler: function handler(val, oldVal) {\n        var _this2 = this;\n\n        if (this.initing) {\n          this.initing = false;\n          return;\n        }\n\n        var skuList = [];\n        var tempSkuList = [];\n        val.forEach(function (tag) {\n          if (skuList.length === 0) {\n            tag.tagItems.forEach(function (tagItem) {\n              var sku = Object.assign({}, _this2.defalutSku);\n              sku.properties = \"\".concat(tag.tagName, \":\").concat(tagItem); // 销售属性组合字符串\n\n              skuList.push(sku);\n            });\n          } else {\n            tempSkuList = [];\n            tag.tagItems.forEach(function (tagItem) {\n              skuList.forEach(function (sku) {\n                var newSku = Object.assign({}, sku);\n                newSku.properties = \"\".concat(sku.properties, \";\").concat(tag.tagName, \":\").concat(tagItem);\n                tempSkuList.push(newSku);\n              });\n            });\n            skuList = tempSkuList;\n          }\n        });\n\n        if (!skuList.length) {\n          skuList.push(Object.assign({}, this.defalutSku));\n        } // debugger\n\n\n        this.$emit('change', skuList);\n      },\n      deep: true\n    }\n  },\n  methods: {\n    init: function init(skuList) {\n      var _this3 = this;\n\n      this.value = skuList;\n\n      if (!skuList || !skuList.length) {\n        this.$emit('change', [Object.assign({}, this.defalutSku)]);\n        return;\n      }\n\n      this.initing = true;\n      var skuTags = [];\n\n      for (var i = 0; i < skuList.length; i++) {\n        var sku = skuList[i];\n        if (!sku.properties) break;\n        var propertiesArray = sku.properties.split(';');\n\n        var _loop2 = function _loop2(j) {\n          var cnProperties = propertiesArray[j].split(':');\n\n          if (!skuTags[j]) {\n            skuTags[j] = {\n              tagName: cnProperties[0],\n              tagItems: []\n            };\n\n            _this3.tagItemInputs.push({\n              visible: false,\n              value: ''\n            });\n          }\n\n          var tagItemNameIndex = skuTags[j].tagItems.findIndex(function (tagItemName) {\n            return tagItemName === cnProperties[1];\n          });\n\n          if (tagItemNameIndex === -1) {\n            skuTags[j].tagItems.push(cnProperties[1]);\n          }\n        };\n\n        for (var j in propertiesArray) {\n          _loop2(j);\n        }\n      }\n\n      this.skuTags = skuTags;\n    },\n    // 显示规格名、规格值输入框\n    shopTagInput: function shopTagInput() {\n      console.log(this.skuTags);\n\n      if (this.skuTags.length >= 2) {\n        alert('最多两个');\n      } else {\n        this.isShowTagInput = true;\n      }\n    },\n    // 隐藏规格名、规格值输入框\n    hideTagInput: function hideTagInput() {\n      this.isShowTagInput = false;\n      this.cleanTagInput();\n    },\n    addTag: function addTag() {\n      var selectValues = this.addTagInput.selectValues;\n\n      if (!this.addTagInput.propName) {\n        this.$message.error('请输入规格名');\n        return;\n      }\n\n      if (!selectValues.length) {\n        this.$message.error('请输入规格值');\n        return;\n      }\n\n      this.isShowTagInput = false;\n      var tagItems = [];\n\n      for (var i = 0; i < selectValues.length; i++) {\n        var element = selectValues[i];\n        tagItems.push(element);\n      } // 向规格中放入规格输入框内的数据\n\n\n      this.$store.commit('prod/addSkuTag', {\n        tagName: this.addTagInput.propName,\n        tagItems: tagItems\n      });\n      this.cleanTagInput();\n    },\n    // 清除规格值输入框内容\n    cleanTagInput: function cleanTagInput() {\n      this.addTagInput = {\n        propName: '',\n        selectValues: []\n      };\n    },\n    // 规格名输入框，选中规格事件\n    handleTagClick: function handleTagClick() {\n      var _this4 = this;\n\n      // 清空规格值输入框\n      this.dbTagValues = [];\n      this.addTagInput.selectValues = []; // 判断规格名输入的值是否为数据库中已有的值\n\n      var specsIndex = this.dbTags.findIndex(function (spec) {\n        return spec.propName === _this4.addTagInput.propName;\n      }); // 如果不是，则说明为用户随便输入\n\n      if (specsIndex === -1) return; // 如果数据库已有该规格名，则获取根据id获取该规格名称含有的规格值\n      // this.$http({\n      //   url: this.$http.adornUrl(`/prod/spec/listSpecValue/${this.dbTags[specsIndex].propId}`),\n      //   method: 'get',\n      //   params: this.$http.adornParams()\n      // }).then(({data}) => {\n      //   this.dbTagValues = data\n      // })\n    },\n    // 关闭标签\n    handleTagClose: function handleTagClose(tagIndex, tagItemIndex) {\n      if (this.skuTags[tagIndex].tagItems.length === 1) {\n        return;\n      }\n\n      this.$store.commit('prod/removeSkuTagItem', {\n        tagIndex: tagIndex,\n        tagItemIndex: tagItemIndex\n      });\n    },\n    // 标签输入框确定时调用\n    handleInputConfirm: function handleInputConfirm(tagIndex) {\n      var tagItem = this.tagItemInputs[tagIndex].value;\n\n      if (tagItem) {\n        this.$store.commit('prod/addSkuTagItem', {\n          tagIndex: tagIndex,\n          tagItem: tagItem\n        });\n      }\n\n      this.tagItemInputs[tagIndex].visible = false;\n      this.tagItemInputs[tagIndex].value = '';\n    },\n    // 显示标签输入框\n    showTagInput: function showTagInput(tagIndex) {\n      var _this5 = this;\n\n      this.tagItemInputs.push({\n        visible: false,\n        value: ''\n      });\n      this.tagItemInputs[tagIndex].visible = true;\n      this.$nextTick(function () {\n        _this5.$refs[\"saveTagInput\".concat(tagIndex)][0].$refs.input.focus();\n      });\n    },\n    removeTag: function removeTag(tagIndex) {\n      this.$store.commit('prod/removeSkuTag', tagIndex);\n    }\n  }\n};",null]}