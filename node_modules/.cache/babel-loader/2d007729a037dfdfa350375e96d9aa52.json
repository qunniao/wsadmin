{"remainingRequest":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js!E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HtmlProjects\\wsadmin\\src\\components\\appHeader\\PasswordEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HtmlProjects\\wsadmin\\src\\components\\appHeader\\PasswordEdit.vue","mtime":1574999591232},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { modifyPasswordAPI } from '@/api/globalAPI.js';\nexport default {\n  name: '',\n  data: function data() {\n    var _this = this;\n\n    /**\n     * 新密码验证规则\n     */\n    var validatNewPassword = function validatNewPassword(rule, value, callback) {\n      if (!value) {\n        callback(new Error('请输入旧密码'));\n      } else if (value.length < 6) {\n        callback(new Error('密码长度需大于等于六位'));\n      } else {\n        callback();\n      }\n    };\n    /**\n     * 重新输入密码验证规则\n     */\n\n\n    var validatReinput = function validatReinput(rule, value, callback) {\n      if (!value) {\n        callback(new Error('请再次输入新密码'));\n      } else if (value !== _this.form.newPassword) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      form: {\n        oldPassword: '',\n        newPassword: '',\n        passwordReinput: ''\n      },\n      rules: {\n        oldPassword: [{\n          required: true,\n          message: '请输入旧密码',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          validator: validatNewPassword,\n          trigger: 'blur'\n        }],\n        passwordReinput: [{\n          validator: validatReinput,\n          trigger: 'blur'\n        }]\n      },\n      loading: false\n    };\n  },\n  props: {\n    formReset: {\n      type: Boolean\n    }\n  },\n  watch: {\n    formReset: function formReset() {\n      this.resetForm();\n    }\n  },\n  methods: {\n    /**\n     * 提交修改密码\n     */\n    submitForm: function submitForm() {\n      var _this2 = this;\n\n      this.$refs.formEdit.validate(function (valid) {\n        if (valid) {\n          var args = {\n            pwd: _this2.form.oldPassword,\n            newPwd: _this2.form.newPassword\n          };\n\n          _this2.$confirm('即将修改密码, 是否继续?', '提示', {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }).then(function () {\n            _this2.modifyPassword(args);\n          }).catch(function (err) {});\n        }\n      });\n    },\n\n    /**\n     * 修改密码请求\n     * @param {Object} args 修改密码请求参数\n     */\n    modifyPassword: function modifyPassword(args) {\n      var _this3 = this;\n\n      this.loading = true;\n      modifyPasswordAPI(args).then(function (res) {\n        var data = res.data;\n\n        if (data.code === 1000) {\n          _this3.$message({\n            type: 'success',\n            message: '修改密码成功，请重新登陆！'\n          });\n\n          _this3.$emit('close-form');\n\n          _this3.$emit('logout-system');\n        } else {\n          _this3.$message({\n            type: 'error',\n            message: data.msg\n          });\n\n          _this3.resetForm();\n        }\n\n        _this3.loading = false;\n      }).catch(function (err) {\n        _this3.loading = false;\n      });\n    },\n\n    /**\n     * 重置表单\n     */\n    resetForm: function resetForm() {\n      this.$refs.formEdit.resetFields();\n    },\n\n    /**\n     * 登出操作\n     */\n    logoutSystem: function logoutSystem() {\n      this.$store.commit('moduleLogin/logout');\n      this.$router.push('/login');\n    }\n  }\n};",{"version":3,"sources":["PasswordEdit.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- 修改密码表单 -->\n<template>\n    <el-form ref=\"formEdit\" :model=\"form\" :rules=\"rules\" label-width=\"100px\">\n        <el-form-item label=\"旧密码\" prop=\"oldPassword\">\n            <el-input type=\"password\" v-model=\"form.oldPassword\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"新密码\" prop=\"newPassword\">\n            <el-input type=\"password\" v-model=\"form.newPassword\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"重复新密码\" prop=\"passwordReinput\">\n            <el-input type=\"password\" v-model=\"form.passwordReinput\"></el-input>\n        </el-form-item>\n        <el-form-item>\n            <el-button type=\"primary\" @click=\"submitForm\" v-loading=\"loading\">立即提交</el-button>\n            <el-button @click=\"resetForm\">重置</el-button>\n        </el-form-item>\n    </el-form>\n</template>\n\n<script>\nimport {\n    modifyPasswordAPI,\n} from '@/api/globalAPI.js';\n\nexport default {\n    name:'',\n    data()   {\n        /**\n         * 新密码验证规则\n         */\n        const validatNewPassword = (rule, value, callback) => {\n            if (!value) {\n                callback(new Error('请输入旧密码'));\n            } else if (value.length < 6) {\n                callback(new Error('密码长度需大于等于六位'));        \n            } else {\n                callback();\n            }\n        };\n        /**\n         * 重新输入密码验证规则\n         */\n        const validatReinput = (rule, value, callback) => {\n            if (!value) {\n                callback(new Error('请再次输入新密码'));\n            } else if (value !== this.form.newPassword) {\n                callback(new Error('两次输入的密码不一致'));        \n            } else {\n                callback();\n            }\n        };\n\n        return   {\n            form: {\n                oldPassword: '',\n                newPassword: '',\n                passwordReinput: '',\n            },\n            rules: {\n                oldPassword: [\n                    { required: true, message: '请输入旧密码', trigger: 'blur' }\n                ],\n                newPassword: [\n                    { validator: validatNewPassword , trigger: 'blur' }\n                ],\n                passwordReinput: [\n                    { validator: validatReinput, trigger: 'blur' }\n                ]\n            },\n            loading: false,\n        }\n    },\n    props: {\n        formReset: {\n            type: Boolean,\n        },\n    },\n    watch: {\n        formReset() {\n            this.resetForm();\n        },\n    },\n    methods: {\n        /**\n         * 提交修改密码\n         */\n        submitForm() {\n            this.$refs.formEdit.validate(valid => {\n                if (valid) {\n                    const args = {\n                        pwd : this.form.oldPassword,\n                        newPwd : this.form.newPassword,\n                    };\n\n                    this.$confirm('即将修改密码, 是否继续?', '提示', {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning'\n                    })\n                        .then(() => {\n                            this.modifyPassword(args);\n                        })\n                        .catch(err => {});\n                }\n            })\n        },\n        /**\n         * 修改密码请求\n         * @param {Object} args 修改密码请求参数\n         */\n        modifyPassword(args) {\n            this.loading = true;\n            modifyPasswordAPI(args)\n                .then(res => {\n                    const data = res.data;\n\n                    if (data.code === 1000) {\n                        this.$message({\n                            type: 'success',\n                            message: '修改密码成功，请重新登陆！'\n                        });\n                        this.$emit('close-form');\n                        this.$emit('logout-system');\n                    } else {\n                        this.$message({\n                            type: 'error',\n                            message: data.msg,\n                        });\n                        this.resetForm();\n                    }\n                    this.loading = false;\n                })\n                .catch(err => {\n                    this.loading = false;\n                });\n        },\n        /**\n         * 重置表单\n         */\n        resetForm() {\n            this.$refs.formEdit.resetFields();\n        },\n        /**\n         * 登出操作\n         */\n        logoutSystem() {\n            this.$store.commit('moduleLogin/logout');\n            this.$router.push('/login');\n        },\n    }\n}\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src\\components\\appHeader"}]}