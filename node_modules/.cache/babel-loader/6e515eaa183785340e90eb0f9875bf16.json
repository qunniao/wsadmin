{"remainingRequest":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js!E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HtmlProjects\\wsadmin\\src\\components\\prodTwo\\sku-tag.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HtmlProjects\\wsadmin\\src\\components\\prodTwo\\sku-tag.vue","mtime":1572513609593},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      value: [],\n      isShowTagInput: false,\n      addTagInput: {\n        propName: '',\n        selectValues: []\n      },\n      tagItemInputs: [],\n      // sku的标记\n      // tags: [],\n      // 数据库中的规格\n      dbTags: [],\n      // 根据选定的规格所查询出来的规格值\n      dbTagValues: [],\n      specs: [],\n      // 使用的规格\n      initing: false\n    };\n  },\n  created: function created() {// this.$http({\n    //   url: this.$http.adornUrl(`/prod/spec/list`),\n    //   method: 'get',\n    //   params: this.$http.adornParams()\n    // }).then(({data}) => {\n    //   this.dbTags = data\n    // })\n  },\n  // props: {\n  //   tags: { // sku的标记\n  //     default: [],\n  //     type: Array\n  //   }\n  // },\n  computed: {\n    // 未使用的规格, 通过计算属性计算\n    unUseTags: function unUseTags() {\n      var _this = this;\n\n      var res = [];\n\n      var _loop = function _loop(i) {\n        var dbTag = _this.dbTags[i];\n\n        var specIndex = _this.skuTags.findIndex(function (tag) {\n          return tag.tagName === dbTag.propName;\n        });\n\n        if (specIndex === -1) {\n          res.push(dbTag);\n        }\n      };\n\n      for (var i = 0; i < this.dbTags.length; i++) {\n        _loop(i);\n      }\n\n      return res;\n    },\n    skuTags: {\n      get: function get() {\n        return this.$store.state.prod.skuTags;\n      },\n      set: function set(val) {\n        this.$store.commit('prod/updateSkuTags', val);\n      }\n    },\n    defalutSku: function defalutSku() {\n      return this.$store.state.prod.defalutSku;\n    }\n  },\n  watch: {\n    skuTags: {\n      handler: function handler(val, oldVal) {\n        var _this2 = this;\n\n        if (this.initing) {\n          this.initing = false;\n          return;\n        }\n\n        var skuList = [];\n        var tempSkuList = [];\n        val.forEach(function (tag) {\n          if (skuList.length === 0) {\n            tag.tagItems.forEach(function (tagItem) {\n              var sku = Object.assign({}, _this2.defalutSku);\n              sku.properties = \"\".concat(tag.tagName, \":\").concat(tagItem); // 销售属性组合字符串\n\n              skuList.push(sku);\n            });\n          } else {\n            tempSkuList = [];\n            tag.tagItems.forEach(function (tagItem) {\n              skuList.forEach(function (sku) {\n                var newSku = Object.assign({}, sku);\n                newSku.properties = \"\".concat(sku.properties, \";\").concat(tag.tagName, \":\").concat(tagItem);\n                tempSkuList.push(newSku);\n              });\n            });\n            skuList = tempSkuList;\n          }\n        });\n\n        if (!skuList.length) {\n          skuList.push(Object.assign({}, this.defalutSku));\n        } // debugger\n\n\n        this.$emit('change', skuList);\n      },\n      deep: true\n    }\n  },\n  methods: {\n    init: function init(skuList) {\n      var _this3 = this;\n\n      this.value = skuList;\n\n      if (!skuList || !skuList.length) {\n        this.$emit('change', [Object.assign({}, this.defalutSku)]);\n        return;\n      }\n\n      this.initing = true;\n      var skuTags = [];\n\n      for (var i = 0; i < skuList.length; i++) {\n        var sku = skuList[i];\n        if (!sku.properties) break;\n        var propertiesArray = sku.properties.split(';');\n\n        var _loop2 = function _loop2(j) {\n          var cnProperties = propertiesArray[j].split(':');\n\n          if (!skuTags[j]) {\n            skuTags[j] = {\n              tagName: cnProperties[0],\n              tagItems: []\n            };\n\n            _this3.tagItemInputs.push({\n              visible: false,\n              value: ''\n            });\n          }\n\n          var tagItemNameIndex = skuTags[j].tagItems.findIndex(function (tagItemName) {\n            return tagItemName === cnProperties[1];\n          });\n\n          if (tagItemNameIndex === -1) {\n            skuTags[j].tagItems.push(cnProperties[1]);\n          }\n        };\n\n        for (var j in propertiesArray) {\n          _loop2(j);\n        }\n      }\n\n      this.skuTags = skuTags;\n    },\n    // 显示规格名、规格值输入框\n    shopTagInput: function shopTagInput() {\n      console.log(this.skuTags);\n\n      if (this.skuTags.length >= 2) {\n        alert('最多两个');\n      } else {\n        this.isShowTagInput = true;\n      }\n    },\n    // 隐藏规格名、规格值输入框\n    hideTagInput: function hideTagInput() {\n      this.isShowTagInput = false;\n      this.cleanTagInput();\n    },\n    addTag: function addTag() {\n      var selectValues = this.addTagInput.selectValues;\n\n      if (!this.addTagInput.propName) {\n        this.$message.error('请输入规格名');\n        return;\n      }\n\n      if (!selectValues.length) {\n        this.$message.error('请输入规格值');\n        return;\n      }\n\n      this.isShowTagInput = false;\n      var tagItems = [];\n\n      for (var i = 0; i < selectValues.length; i++) {\n        var element = selectValues[i];\n        tagItems.push(element);\n      } // 向规格中放入规格输入框内的数据\n\n\n      this.$store.commit('prod/addSkuTag', {\n        tagName: this.addTagInput.propName,\n        tagItems: tagItems\n      });\n      this.cleanTagInput();\n    },\n    // 清除规格值输入框内容\n    cleanTagInput: function cleanTagInput() {\n      this.addTagInput = {\n        propName: '',\n        selectValues: []\n      };\n    },\n    // 规格名输入框，选中规格事件\n    handleTagClick: function handleTagClick() {\n      var _this4 = this;\n\n      // 清空规格值输入框\n      this.dbTagValues = [];\n      this.addTagInput.selectValues = []; // 判断规格名输入的值是否为数据库中已有的值\n\n      var specsIndex = this.dbTags.findIndex(function (spec) {\n        return spec.propName === _this4.addTagInput.propName;\n      }); // 如果不是，则说明为用户随便输入\n\n      if (specsIndex === -1) return; // 如果数据库已有该规格名，则获取根据id获取该规格名称含有的规格值\n      // this.$http({\n      //   url: this.$http.adornUrl(`/prod/spec/listSpecValue/${this.dbTags[specsIndex].propId}`),\n      //   method: 'get',\n      //   params: this.$http.adornParams()\n      // }).then(({data}) => {\n      //   this.dbTagValues = data\n      // })\n    },\n    // 关闭标签\n    handleTagClose: function handleTagClose(tagIndex, tagItemIndex) {\n      if (this.skuTags[tagIndex].tagItems.length === 1) {\n        return;\n      }\n\n      this.$store.commit('prod/removeSkuTagItem', {\n        tagIndex: tagIndex,\n        tagItemIndex: tagItemIndex\n      });\n    },\n    // 标签输入框确定时调用\n    handleInputConfirm: function handleInputConfirm(tagIndex) {\n      var tagItem = this.tagItemInputs[tagIndex].value;\n\n      if (tagItem) {\n        this.$store.commit('prod/addSkuTagItem', {\n          tagIndex: tagIndex,\n          tagItem: tagItem\n        });\n      }\n\n      this.tagItemInputs[tagIndex].visible = false;\n      this.tagItemInputs[tagIndex].value = '';\n    },\n    // 显示标签输入框\n    showTagInput: function showTagInput(tagIndex) {\n      var _this5 = this;\n\n      this.tagItemInputs.push({\n        visible: false,\n        value: ''\n      });\n      this.tagItemInputs[tagIndex].visible = true;\n      this.$nextTick(function () {\n        _this5.$refs[\"saveTagInput\".concat(tagIndex)][0].$refs.input.focus();\n      });\n    },\n    removeTag: function removeTag(tagIndex) {\n      this.$store.commit('prod/removeSkuTag', tagIndex);\n    }\n  }\n};",{"version":3,"sources":["sku-tag.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"mod-prod-sku-tag\">\n    <el-form-item label=\"商品规格\">\n      <el-button size=\"mini\" @click=\"shopTagInput()\">添加规格</el-button>\n      <div v-for=\"(tag, tagIndex) in skuTags\" :key=\"tagIndex\">\n        <span>{{tag.tagName}}</span>\n        <el-button class=\"button-new-tag\" type=\"text\"  icon=\"el-icon-delete\" @click=\"removeTag(tagIndex)\">删除</el-button>\n        <br/>\n        <el-tag\n          v-for=\"(tagItem, tagItemIndex) in tag.tagItems\"\n          :key=\"tagItem\"\n          closable\n          :disable-transitions=\"false\"\n          @close=\"handleTagClose(tagIndex, tagItemIndex)\">\n          {{tagItem}}\n        </el-tag>\n        <el-input\n          class=\"input-new-tag\"\n          v-if=\"tagItemInputs[tagIndex] && tagItemInputs[tagIndex].visible\"\n          v-model=\"tagItemInputs[tagIndex].value\"\n          :ref=\"`saveTagInput${tagIndex}`\"\n          size=\"small\"\n          @keyup.enter.native=\"handleInputConfirm(tagIndex)\"\n          @blur=\"handleInputConfirm(tagIndex)\">\n        </el-input>\n        <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showTagInput(tagIndex)\">+ 添加</el-button>\n      </div>\n    </el-form-item>\n    <el-form-item label=\"规格名\" v-show=\"isShowTagInput\">\n      <el-col :span=\"8\">\n        <el-select v-model=\"addTagInput.propName\" filterable allow-create default-first-option placeholder=\"请选择\" @change=\"handleTagClick\">\n          <el-option\n            v-for=\"item in unUseTags\"\n            :key=\"item.propId\"\n            :label=\"item.propName\"\n            :value=\"item.propName\">\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-form-item>\n    <el-form-item label=\"规格值\" v-show=\"isShowTagInput\">\n      <el-col :span=\"8\">\n        <el-select v-model=\"addTagInput.selectValues\" multiple filterable allow-create default-first-option placeholder=\"请选择\">\n          <el-option\n            v-for=\"item in dbTagValues\"\n            :key=\"item.valueId\"\n            :label=\"item.propValue\"\n            :value=\"item.propValue\">\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-form-item>\n    <el-form-item>\n      <el-button size=\"mini\" type=\"primary\" @click=\"addTag()\" v-show=\"isShowTagInput\">确定</el-button>\n      <el-button size=\"mini\" @click=\"hideTagInput()\" v-show=\"isShowTagInput\">取消</el-button>\n    </el-form-item>\n  </div>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        value: [],\n        isShowTagInput: false,\n        addTagInput: {\n          propName: '',\n          selectValues: []\n        },\n        tagItemInputs: [],\n        // sku的标记\n        // tags: [],\n        // 数据库中的规格\n        dbTags: [],\n        // 根据选定的规格所查询出来的规格值\n        dbTagValues: [],\n        specs: [], // 使用的规格\n        initing: false\n      }\n    },\n    created: function () {\n      // this.$http({\n      //   url: this.$http.adornUrl(`/prod/spec/list`),\n      //   method: 'get',\n      //   params: this.$http.adornParams()\n      // }).then(({data}) => {\n      //   this.dbTags = data\n      // })\n    },\n    // props: {\n    //   tags: { // sku的标记\n    //     default: [],\n    //     type: Array\n    //   }\n    // },\n    computed: {\n      // 未使用的规格, 通过计算属性计算\n      unUseTags () {\n        let res = []\n        for (let i = 0; i < this.dbTags.length; i++) {\n          const dbTag = this.dbTags[i]\n          let specIndex = this.skuTags.findIndex(tag => tag.tagName === dbTag.propName)\n          if (specIndex === -1) {\n            res.push(dbTag)\n          }\n        }\n        return res\n      },\n      skuTags: {\n        get () { return this.$store.state.prod.skuTags },\n        set (val) { this.$store.commit('prod/updateSkuTags', val) }\n      },\n      defalutSku () {\n        return this.$store.state.prod.defalutSku\n      }\n    },\n    watch: {\n      skuTags: {\n        handler (val, oldVal) {\n          if (this.initing) {\n            this.initing = false\n            return\n          }\n          let skuList = []\n          let tempSkuList = []\n          val.forEach(tag => {\n            if (skuList.length === 0) {\n              tag.tagItems.forEach(tagItem => {\n                let sku = Object.assign({}, this.defalutSku)\n                sku.properties = `${tag.tagName}:${tagItem}` // 销售属性组合字符串\n                skuList.push(sku)\n              })\n            } else {\n              tempSkuList = []\n              tag.tagItems.forEach(tagItem => {\n                skuList.forEach(sku => {\n                  let newSku = Object.assign({}, sku)\n                  newSku.properties = `${sku.properties};${tag.tagName}:${tagItem}`\n                  tempSkuList.push(newSku)\n                })\n              })\n              skuList = tempSkuList\n            }\n          })\n          if (!skuList.length) {\n            skuList.push(Object.assign({}, this.defalutSku))\n          }\n          // debugger\n          this.$emit('change', skuList)\n        },\n        deep: true\n      }\n    },\n    methods: {\n      init (skuList) {\n        this.value = skuList\n        if (!skuList || !skuList.length) {\n          this.$emit('change', [Object.assign({}, this.defalutSku)])\n          return\n        }\n        this.initing = true\n        let skuTags = []\n        for (let i = 0; i < skuList.length; i++) {\n          const sku = skuList[i]\n          if (!sku.properties) break\n          let propertiesArray = sku.properties.split(';')\n          for (let j in propertiesArray) {\n            let cnProperties = propertiesArray[j].split(':')\n            if (!skuTags[j]) {\n              skuTags[j] = {\n                tagName: cnProperties[0],\n                tagItems: []\n              }\n              this.tagItemInputs.push({visible: false, value: ''})\n            }\n            let tagItemNameIndex = skuTags[j].tagItems.findIndex((tagItemName) => tagItemName === cnProperties[1])\n            if (tagItemNameIndex === -1) {\n              skuTags[j].tagItems.push(cnProperties[1])\n            }\n          }\n        }\n        this.skuTags = skuTags\n      },\n      // 显示规格名、规格值输入框\n      shopTagInput () {\n        console.log(this.skuTags)\n        if(this.skuTags.length>=2){\n          alert('最多两个')\n        }else{\n          this.isShowTagInput = true\n        }\n      },\n      // 隐藏规格名、规格值输入框\n      hideTagInput () {\n        this.isShowTagInput = false\n        this.cleanTagInput()\n      },\n      addTag () {\n        let selectValues = this.addTagInput.selectValues\n        if (!this.addTagInput.propName) {\n          this.$message.error('请输入规格名')\n          return\n        }\n        if (!selectValues.length) {\n          this.$message.error('请输入规格值')\n          return\n        }\n        this.isShowTagInput = false\n        let tagItems = []\n        for (let i = 0; i < selectValues.length; i++) {\n          const element = selectValues[i]\n          tagItems.push(element)\n        }\n        // 向规格中放入规格输入框内的数据\n        this.$store.commit('prod/addSkuTag', {\n          tagName: this.addTagInput.propName,\n          tagItems\n        })\n        this.cleanTagInput()\n      },\n      // 清除规格值输入框内容\n      cleanTagInput () {\n        this.addTagInput = {\n          propName: '',\n          selectValues: []\n        }\n      },\n      // 规格名输入框，选中规格事件\n      handleTagClick () {\n        // 清空规格值输入框\n        this.dbTagValues = []\n        this.addTagInput.selectValues = []\n        // 判断规格名输入的值是否为数据库中已有的值\n        let specsIndex = this.dbTags.findIndex(spec => spec.propName === this.addTagInput.propName)\n        // 如果不是，则说明为用户随便输入\n        if (specsIndex === -1) return\n        // 如果数据库已有该规格名，则获取根据id获取该规格名称含有的规格值\n        // this.$http({\n        //   url: this.$http.adornUrl(`/prod/spec/listSpecValue/${this.dbTags[specsIndex].propId}`),\n        //   method: 'get',\n        //   params: this.$http.adornParams()\n        // }).then(({data}) => {\n        //   this.dbTagValues = data\n        // })\n      },\n      // 关闭标签\n      handleTagClose (tagIndex, tagItemIndex) {\n        if (this.skuTags[tagIndex].tagItems.length === 1) {\n          return\n        }\n        this.$store.commit('prod/removeSkuTagItem', {tagIndex, tagItemIndex})\n      },\n      // 标签输入框确定时调用\n      handleInputConfirm (tagIndex) {\n        let tagItem = this.tagItemInputs[tagIndex].value\n        if (tagItem) {\n          this.$store.commit('prod/addSkuTagItem', {tagIndex, tagItem})\n        }\n        this.tagItemInputs[tagIndex].visible = false\n        this.tagItemInputs[tagIndex].value = ''\n      },\n      // 显示标签输入框\n      showTagInput (tagIndex) {\n        this.tagItemInputs.push({visible: false, value: ''})\n        this.tagItemInputs[tagIndex].visible = true\n        this.$nextTick(() => {\n          this.$refs[`saveTagInput${tagIndex}`][0].$refs.input.focus()\n        })\n      },\n      removeTag (tagIndex) {\n        this.$store.commit('prod/removeSkuTag', tagIndex)\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n\n  .mod-prod-sku-tag{\n    .el-tag + .el-tag {\n      margin-left: 10px;\n    }\n    .button-new-tag {\n      margin-left: 10px;\n      height: 32px;\n      line-height: 30px;\n      padding-top: 0;\n      padding-bottom: 0;\n    }\n    .input-new-tag {\n      width: 90px;\n      margin-left: 10px;\n      vertical-align: bottom;\n    }\n  }\n</style>\n"],"sourceRoot":"src\\components\\prod"}]}