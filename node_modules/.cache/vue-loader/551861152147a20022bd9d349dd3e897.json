{"remainingRequest":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HtmlProjects\\wsadmin\\src\\components\\prod\\sku-tag.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HtmlProjects\\wsadmin\\src\\components\\prod\\sku-tag.vue","mtime":1571992544583},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data () {\n    return {\n      value: [],\n      isShowTagInput: false,\n      addTagInput: {\n        propName: '',\n        selectValues: []\n      },\n      tagItemInputs: [],\n      // sku的标记\n      // tags: [],\n      // 数据库中的规格\n      dbTags: [],\n      // 根据选定的规格所查询出来的规格值\n      dbTagValues: [],\n      specs: [], // 使用的规格\n      initing: false\n    }\n  },\n  created: function () {\n    // this.$http({\n    //   url: this.$http.adornUrl(`/prod/spec/list`),\n    //   method: 'get',\n    //   params: this.$http.adornParams()\n    // }).then(({data}) => {\n    //   this.dbTags = data\n    // })\n  },\n  // props: {\n  //   tags: { // sku的标记\n  //     default: [],\n  //     type: Array\n  //   }\n  // },\n  computed: {\n    // 未使用的规格, 通过计算属性计算\n    unUseTags () {\n      let res = []\n      for (let i = 0; i < this.dbTags.length; i++) {\n        const dbTag = this.dbTags[i]\n        let specIndex = this.skuTags.findIndex(tag => tag.tagName === dbTag.propName)\n        if (specIndex === -1) {\n          res.push(dbTag)\n        }\n      }\n      return res\n    },\n    skuTags: {\n      get () { return this.$store.state.prod.skuTags },\n      set (val) { this.$store.commit('prod/updateSkuTags', val) }\n    },\n    defalutSku () {\n      return this.$store.state.prod.defalutSku\n    }\n  },\n  watch: {\n    skuTags: {\n      handler (val, oldVal) {\n        if (this.initing) {\n          this.initing = false\n          return\n        }\n        let skuList = []\n        let tempSkuList = []\n        val.forEach(tag => {\n          if (skuList.length === 0) {\n            tag.tagItems.forEach(tagItem => {\n              let sku = Object.assign({}, this.defalutSku)\n              sku.properties = `${tag.tagName}:${tagItem}` // 销售属性组合字符串\n              skuList.push(sku)\n            })\n          } else {\n            tempSkuList = []\n            tag.tagItems.forEach(tagItem => {\n              skuList.forEach(sku => {\n                let newSku = Object.assign({}, sku)\n                newSku.properties = `${sku.properties};${tag.tagName}:${tagItem}`\n                tempSkuList.push(newSku)\n              })\n            })\n            skuList = tempSkuList\n          }\n        })\n        if (!skuList.length) {\n          skuList.push(Object.assign({}, this.defalutSku))\n        }\n        // debugger\n        this.$emit('change', skuList)\n      },\n      deep: true\n    }\n  },\n  methods: {\n    init (skuList) {\n      this.value = skuList\n      if (!skuList || !skuList.length) {\n        this.$emit('change', [Object.assign({}, this.defalutSku)])\n        return\n      }\n      this.initing = true\n      let skuTags = []\n      for (let i = 0; i < skuList.length; i++) {\n        const sku = skuList[i]\n        if (!sku.properties) break\n        let propertiesArray = sku.properties.split(';')\n        for (let j in propertiesArray) {\n          let cnProperties = propertiesArray[j].split(':')\n          if (!skuTags[j]) {\n            skuTags[j] = {\n              tagName: cnProperties[0],\n              tagItems: []\n            }\n            this.tagItemInputs.push({visible: false, value: ''})\n          }\n          let tagItemNameIndex = skuTags[j].tagItems.findIndex((tagItemName) => tagItemName === cnProperties[1])\n          if (tagItemNameIndex === -1) {\n            skuTags[j].tagItems.push(cnProperties[1])\n          }\n        }\n      }\n      this.skuTags = skuTags\n    },\n    // 显示规格名、规格值输入框\n    shopTagInput () {\n      console.log(this.skuTags)\n      if(this.skuTags.length>=2){\n        alert('最多两个')\n      }else{\n        this.isShowTagInput = true\n      }\n    },\n    // 隐藏规格名、规格值输入框\n    hideTagInput () {\n      this.isShowTagInput = false\n      this.cleanTagInput()\n    },\n    addTag () {\n      let selectValues = this.addTagInput.selectValues\n      if (!this.addTagInput.propName) {\n        this.$message.error('请输入规格名')\n        return\n      }\n      if (!selectValues.length) {\n        this.$message.error('请输入规格值')\n        return\n      }\n      this.isShowTagInput = false\n      let tagItems = []\n      for (let i = 0; i < selectValues.length; i++) {\n        const element = selectValues[i]\n        tagItems.push(element)\n      }\n      // 向规格中放入规格输入框内的数据\n      this.$store.commit('prod/addSkuTag', {\n        tagName: this.addTagInput.propName,\n        tagItems\n      })\n      this.cleanTagInput()\n    },\n    // 清除规格值输入框内容\n    cleanTagInput () {\n      this.addTagInput = {\n        propName: '',\n        selectValues: []\n      }\n    },\n    // 规格名输入框，选中规格事件\n    handleTagClick () {\n      // 清空规格值输入框\n      this.dbTagValues = []\n      this.addTagInput.selectValues = []\n      // 判断规格名输入的值是否为数据库中已有的值\n      let specsIndex = this.dbTags.findIndex(spec => spec.propName === this.addTagInput.propName)\n      // 如果不是，则说明为用户随便输入\n      if (specsIndex === -1) return\n      // 如果数据库已有该规格名，则获取根据id获取该规格名称含有的规格值\n      // this.$http({\n      //   url: this.$http.adornUrl(`/prod/spec/listSpecValue/${this.dbTags[specsIndex].propId}`),\n      //   method: 'get',\n      //   params: this.$http.adornParams()\n      // }).then(({data}) => {\n      //   this.dbTagValues = data\n      // })\n    },\n    // 关闭标签\n    handleTagClose (tagIndex, tagItemIndex) {\n      if (this.skuTags[tagIndex].tagItems.length === 1) {\n        return\n      }\n      this.$store.commit('prod/removeSkuTagItem', {tagIndex, tagItemIndex})\n    },\n    // 标签输入框确定时调用\n    handleInputConfirm (tagIndex) {\n      let tagItem = this.tagItemInputs[tagIndex].value\n      if (tagItem) {\n        this.$store.commit('prod/addSkuTagItem', {tagIndex, tagItem})\n      }\n      this.tagItemInputs[tagIndex].visible = false\n      this.tagItemInputs[tagIndex].value = ''\n    },\n    // 显示标签输入框\n    showTagInput (tagIndex) {\n      this.tagItemInputs.push({visible: false, value: ''})\n      this.tagItemInputs[tagIndex].visible = true\n      this.$nextTick(() => {\n        this.$refs[`saveTagInput${tagIndex}`][0].$refs.input.focus()\n      })\n    },\n    removeTag (tagIndex) {\n      this.$store.commit('prod/removeSkuTag', tagIndex)\n    }\n  }\n}\n",{"version":3,"sources":["sku-tag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sku-tag.vue","sourceRoot":"src\\components\\prod","sourcesContent":["<template>\n  <div class=\"mod-prod-sku-tag\">\n    <el-form-item label=\"商品规格\">\n      <el-button size=\"mini\" @click=\"shopTagInput()\">添加规格</el-button>\n      <div v-for=\"(tag, tagIndex) in skuTags\" :key=\"tagIndex\">\n        <span>{{tag.tagName}}</span>\n        <el-button class=\"button-new-tag\" type=\"text\"  icon=\"el-icon-delete\" @click=\"removeTag(tagIndex)\">删除</el-button>\n        <br/>\n        <el-tag\n          v-for=\"(tagItem, tagItemIndex) in tag.tagItems\"\n          :key=\"tagItem\"\n          closable\n          :disable-transitions=\"false\"\n          @close=\"handleTagClose(tagIndex, tagItemIndex)\">\n          {{tagItem}}\n        </el-tag>\n        <el-input\n          class=\"input-new-tag\"\n          v-if=\"tagItemInputs[tagIndex] && tagItemInputs[tagIndex].visible\"\n          v-model=\"tagItemInputs[tagIndex].value\"\n          :ref=\"`saveTagInput${tagIndex}`\"\n          size=\"small\"\n          @keyup.enter.native=\"handleInputConfirm(tagIndex)\"\n          @blur=\"handleInputConfirm(tagIndex)\">\n        </el-input>\n        <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showTagInput(tagIndex)\">+ 添加</el-button>\n      </div>\n    </el-form-item>\n    <el-form-item label=\"规格名\" v-show=\"isShowTagInput\">\n      <el-col :span=\"8\">\n        <el-select v-model=\"addTagInput.propName\" filterable allow-create default-first-option placeholder=\"请选择\" @change=\"handleTagClick\">\n          <el-option\n            v-for=\"item in unUseTags\"\n            :key=\"item.propId\"\n            :label=\"item.propName\"\n            :value=\"item.propName\">\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-form-item>\n    <el-form-item label=\"规格值\" v-show=\"isShowTagInput\">\n      <el-col :span=\"8\">\n        <el-select v-model=\"addTagInput.selectValues\" multiple filterable allow-create default-first-option placeholder=\"请选择\">\n          <el-option\n            v-for=\"item in dbTagValues\"\n            :key=\"item.valueId\"\n            :label=\"item.propValue\"\n            :value=\"item.propValue\">\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-form-item>\n    <el-form-item>\n      <el-button size=\"mini\" type=\"primary\" @click=\"addTag()\" v-show=\"isShowTagInput\">确定</el-button>\n      <el-button size=\"mini\" @click=\"hideTagInput()\" v-show=\"isShowTagInput\">取消</el-button>\n    </el-form-item>\n  </div>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        value: [],\n        isShowTagInput: false,\n        addTagInput: {\n          propName: '',\n          selectValues: []\n        },\n        tagItemInputs: [],\n        // sku的标记\n        // tags: [],\n        // 数据库中的规格\n        dbTags: [],\n        // 根据选定的规格所查询出来的规格值\n        dbTagValues: [],\n        specs: [], // 使用的规格\n        initing: false\n      }\n    },\n    created: function () {\n      // this.$http({\n      //   url: this.$http.adornUrl(`/prod/spec/list`),\n      //   method: 'get',\n      //   params: this.$http.adornParams()\n      // }).then(({data}) => {\n      //   this.dbTags = data\n      // })\n    },\n    // props: {\n    //   tags: { // sku的标记\n    //     default: [],\n    //     type: Array\n    //   }\n    // },\n    computed: {\n      // 未使用的规格, 通过计算属性计算\n      unUseTags () {\n        let res = []\n        for (let i = 0; i < this.dbTags.length; i++) {\n          const dbTag = this.dbTags[i]\n          let specIndex = this.skuTags.findIndex(tag => tag.tagName === dbTag.propName)\n          if (specIndex === -1) {\n            res.push(dbTag)\n          }\n        }\n        return res\n      },\n      skuTags: {\n        get () { return this.$store.state.prod.skuTags },\n        set (val) { this.$store.commit('prod/updateSkuTags', val) }\n      },\n      defalutSku () {\n        return this.$store.state.prod.defalutSku\n      }\n    },\n    watch: {\n      skuTags: {\n        handler (val, oldVal) {\n          if (this.initing) {\n            this.initing = false\n            return\n          }\n          let skuList = []\n          let tempSkuList = []\n          val.forEach(tag => {\n            if (skuList.length === 0) {\n              tag.tagItems.forEach(tagItem => {\n                let sku = Object.assign({}, this.defalutSku)\n                sku.properties = `${tag.tagName}:${tagItem}` // 销售属性组合字符串\n                skuList.push(sku)\n              })\n            } else {\n              tempSkuList = []\n              tag.tagItems.forEach(tagItem => {\n                skuList.forEach(sku => {\n                  let newSku = Object.assign({}, sku)\n                  newSku.properties = `${sku.properties};${tag.tagName}:${tagItem}`\n                  tempSkuList.push(newSku)\n                })\n              })\n              skuList = tempSkuList\n            }\n          })\n          if (!skuList.length) {\n            skuList.push(Object.assign({}, this.defalutSku))\n          }\n          // debugger\n          this.$emit('change', skuList)\n        },\n        deep: true\n      }\n    },\n    methods: {\n      init (skuList) {\n        this.value = skuList\n        if (!skuList || !skuList.length) {\n          this.$emit('change', [Object.assign({}, this.defalutSku)])\n          return\n        }\n        this.initing = true\n        let skuTags = []\n        for (let i = 0; i < skuList.length; i++) {\n          const sku = skuList[i]\n          if (!sku.properties) break\n          let propertiesArray = sku.properties.split(';')\n          for (let j in propertiesArray) {\n            let cnProperties = propertiesArray[j].split(':')\n            if (!skuTags[j]) {\n              skuTags[j] = {\n                tagName: cnProperties[0],\n                tagItems: []\n              }\n              this.tagItemInputs.push({visible: false, value: ''})\n            }\n            let tagItemNameIndex = skuTags[j].tagItems.findIndex((tagItemName) => tagItemName === cnProperties[1])\n            if (tagItemNameIndex === -1) {\n              skuTags[j].tagItems.push(cnProperties[1])\n            }\n          }\n        }\n        this.skuTags = skuTags\n      },\n      // 显示规格名、规格值输入框\n      shopTagInput () {\n        console.log(this.skuTags)\n        if(this.skuTags.length>=2){\n          alert('最多两个')\n        }else{\n          this.isShowTagInput = true\n        }\n      },\n      // 隐藏规格名、规格值输入框\n      hideTagInput () {\n        this.isShowTagInput = false\n        this.cleanTagInput()\n      },\n      addTag () {\n        let selectValues = this.addTagInput.selectValues\n        if (!this.addTagInput.propName) {\n          this.$message.error('请输入规格名')\n          return\n        }\n        if (!selectValues.length) {\n          this.$message.error('请输入规格值')\n          return\n        }\n        this.isShowTagInput = false\n        let tagItems = []\n        for (let i = 0; i < selectValues.length; i++) {\n          const element = selectValues[i]\n          tagItems.push(element)\n        }\n        // 向规格中放入规格输入框内的数据\n        this.$store.commit('prod/addSkuTag', {\n          tagName: this.addTagInput.propName,\n          tagItems\n        })\n        this.cleanTagInput()\n      },\n      // 清除规格值输入框内容\n      cleanTagInput () {\n        this.addTagInput = {\n          propName: '',\n          selectValues: []\n        }\n      },\n      // 规格名输入框，选中规格事件\n      handleTagClick () {\n        // 清空规格值输入框\n        this.dbTagValues = []\n        this.addTagInput.selectValues = []\n        // 判断规格名输入的值是否为数据库中已有的值\n        let specsIndex = this.dbTags.findIndex(spec => spec.propName === this.addTagInput.propName)\n        // 如果不是，则说明为用户随便输入\n        if (specsIndex === -1) return\n        // 如果数据库已有该规格名，则获取根据id获取该规格名称含有的规格值\n        // this.$http({\n        //   url: this.$http.adornUrl(`/prod/spec/listSpecValue/${this.dbTags[specsIndex].propId}`),\n        //   method: 'get',\n        //   params: this.$http.adornParams()\n        // }).then(({data}) => {\n        //   this.dbTagValues = data\n        // })\n      },\n      // 关闭标签\n      handleTagClose (tagIndex, tagItemIndex) {\n        if (this.skuTags[tagIndex].tagItems.length === 1) {\n          return\n        }\n        this.$store.commit('prod/removeSkuTagItem', {tagIndex, tagItemIndex})\n      },\n      // 标签输入框确定时调用\n      handleInputConfirm (tagIndex) {\n        let tagItem = this.tagItemInputs[tagIndex].value\n        if (tagItem) {\n          this.$store.commit('prod/addSkuTagItem', {tagIndex, tagItem})\n        }\n        this.tagItemInputs[tagIndex].visible = false\n        this.tagItemInputs[tagIndex].value = ''\n      },\n      // 显示标签输入框\n      showTagInput (tagIndex) {\n        this.tagItemInputs.push({visible: false, value: ''})\n        this.tagItemInputs[tagIndex].visible = true\n        this.$nextTick(() => {\n          this.$refs[`saveTagInput${tagIndex}`][0].$refs.input.focus()\n        })\n      },\n      removeTag (tagIndex) {\n        this.$store.commit('prod/removeSkuTag', tagIndex)\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n\n  .mod-prod-sku-tag{\n    .el-tag + .el-tag {\n      margin-left: 10px;\n    }\n    .button-new-tag {\n      margin-left: 10px;\n      height: 32px;\n      line-height: 30px;\n      padding-top: 0;\n      padding-bottom: 0;\n    }\n    .input-new-tag {\n      width: 90px;\n      margin-left: 10px;\n      vertical-align: bottom;\n    }\n  }\n</style>\n"]}]}