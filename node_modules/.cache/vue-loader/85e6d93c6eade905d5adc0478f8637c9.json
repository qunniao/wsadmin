{"remainingRequest":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HtmlProjects\\wsadmin\\src\\components\\appHeader\\PasswordEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HtmlProjects\\wsadmin\\src\\components\\appHeader\\PasswordEdit.vue","mtime":1574999591232},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576862582236},{"path":"E:\\HtmlProjects\\wsadmin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n    modifyPasswordAPI,\n} from '@/api/globalAPI.js';\n\nexport default {\n    name:'',\n    data()   {\n        /**\n         * 新密码验证规则\n         */\n        const validatNewPassword = (rule, value, callback) => {\n            if (!value) {\n                callback(new Error('请输入旧密码'));\n            } else if (value.length < 6) {\n                callback(new Error('密码长度需大于等于六位'));        \n            } else {\n                callback();\n            }\n        };\n        /**\n         * 重新输入密码验证规则\n         */\n        const validatReinput = (rule, value, callback) => {\n            if (!value) {\n                callback(new Error('请再次输入新密码'));\n            } else if (value !== this.form.newPassword) {\n                callback(new Error('两次输入的密码不一致'));        \n            } else {\n                callback();\n            }\n        };\n\n        return   {\n            form: {\n                oldPassword: '',\n                newPassword: '',\n                passwordReinput: '',\n            },\n            rules: {\n                oldPassword: [\n                    { required: true, message: '请输入旧密码', trigger: 'blur' }\n                ],\n                newPassword: [\n                    { validator: validatNewPassword , trigger: 'blur' }\n                ],\n                passwordReinput: [\n                    { validator: validatReinput, trigger: 'blur' }\n                ]\n            },\n            loading: false,\n        }\n    },\n    props: {\n        formReset: {\n            type: Boolean,\n        },\n    },\n    watch: {\n        formReset() {\n            this.resetForm();\n        },\n    },\n    methods: {\n        /**\n         * 提交修改密码\n         */\n        submitForm() {\n            this.$refs.formEdit.validate(valid => {\n                if (valid) {\n                    const args = {\n                        pwd : this.form.oldPassword,\n                        newPwd : this.form.newPassword,\n                    };\n\n                    this.$confirm('即将修改密码, 是否继续?', '提示', {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning'\n                    })\n                        .then(() => {\n                            this.modifyPassword(args);\n                        })\n                        .catch(err => {});\n                }\n            })\n        },\n        /**\n         * 修改密码请求\n         * @param {Object} args 修改密码请求参数\n         */\n        modifyPassword(args) {\n            this.loading = true;\n            modifyPasswordAPI(args)\n                .then(res => {\n                    const data = res.data;\n\n                    if (data.code === 1000) {\n                        this.$message({\n                            type: 'success',\n                            message: '修改密码成功，请重新登陆！'\n                        });\n                        this.$emit('close-form');\n                        this.$emit('logout-system');\n                    } else {\n                        this.$message({\n                            type: 'error',\n                            message: data.msg,\n                        });\n                        this.resetForm();\n                    }\n                    this.loading = false;\n                })\n                .catch(err => {\n                    this.loading = false;\n                });\n        },\n        /**\n         * 重置表单\n         */\n        resetForm() {\n            this.$refs.formEdit.resetFields();\n        },\n        /**\n         * 登出操作\n         */\n        logoutSystem() {\n            this.$store.commit('moduleLogin/logout');\n            this.$router.push('/login');\n        },\n    }\n}\n",null]}